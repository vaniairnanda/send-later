// Code generated by MockGen. DO NOT EDIT.
// Source: api/disbursement/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	disbursement "github.com/vaniairnanda/send-later/model/disbursement"
	gorm "gorm.io/gorm"
)

// MockBatchRepository is a mock of BatchRepository interface.
type MockBatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBatchRepositoryMockRecorder
}

// MockBatchRepositoryMockRecorder is the mock recorder for MockBatchRepository.
type MockBatchRepositoryMockRecorder struct {
	mock *MockBatchRepository
}

// NewMockBatchRepository creates a new mock instance.
func NewMockBatchRepository(ctrl *gomock.Controller) *MockBatchRepository {
	mock := &MockBatchRepository{ctrl: ctrl}
	mock.recorder = &MockBatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchRepository) EXPECT() *MockBatchRepositoryMockRecorder {
	return m.recorder
}

// PatchByID mocks base method.
func (m *MockBatchRepository) PatchByID(ctx context.Context, db *gorm.DB, data map[string]interface{}, id uint64) (*disbursement.BatchDisbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchByID", ctx, db, data, id)
	ret0, _ := ret[0].(*disbursement.BatchDisbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchByID indicates an expected call of PatchByID.
func (mr *MockBatchRepositoryMockRecorder) PatchByID(ctx, db, data, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchByID", reflect.TypeOf((*MockBatchRepository)(nil).PatchByID), ctx, db, data, id)
}

// Store mocks base method.
func (m *MockBatchRepository) Store(ctx context.Context, db *gorm.DB, data disbursement.BatchDisbursement) (disbursement.BatchDisbursement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, db, data)
	ret0, _ := ret[0].(disbursement.BatchDisbursement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockBatchRepositoryMockRecorder) Store(ctx, db, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockBatchRepository)(nil).Store), ctx, db, data)
}

// MockDisbursementRepository is a mock of DisbursementRepository interface.
type MockDisbursementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDisbursementRepositoryMockRecorder
}

// MockDisbursementRepositoryMockRecorder is the mock recorder for MockDisbursementRepository.
type MockDisbursementRepositoryMockRecorder struct {
	mock *MockDisbursementRepository
}

// NewMockDisbursementRepository creates a new mock instance.
func NewMockDisbursementRepository(ctrl *gomock.Controller) *MockDisbursementRepository {
	mock := &MockDisbursementRepository{ctrl: ctrl}
	mock.recorder = &MockDisbursementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisbursementRepository) EXPECT() *MockDisbursementRepositoryMockRecorder {
	return m.recorder
}

// BulkStore mocks base method.
func (m *MockDisbursementRepository) BulkStore(ctx context.Context, db *gorm.DB, data []disbursement.Disbursement) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkStore", ctx, db, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BulkStore indicates an expected call of BulkStore.
func (mr *MockDisbursementRepositoryMockRecorder) BulkStore(ctx, db, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkStore", reflect.TypeOf((*MockDisbursementRepository)(nil).BulkStore), ctx, db, data)
}
